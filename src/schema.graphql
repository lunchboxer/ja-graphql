scalar Date

type AuthPayload {
  token: String!
  user: User
}

type Mutation {
  createStudent(input: CreateStudentInput!): Student
  deleteStudent(id: ID!): Student
  updateStudent(input: UpdateStudentInput!): Student

  login(username: String!, password: String!): AuthPayload
  createInitialAdmin(input: CreateInitialAdminInput!): AuthPayload
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(id: ID!): User
  changePassword(id: ID!, newPassword: String!, oldPassword: String!): User
  assignRole(userId: ID!, role: String!): User
  unassignRole(userId: ID!, role: String!): User

  createRole(name: String!): Role
  renameRole(id: ID!, name: String!): Role
  deleteRole(id: ID!): Role

  updateSchool(name: String, address: String): School

  createSchoolYear(input: CreateSchoolYearInput!): SchoolYear
  updateSchoolYear(input: UpdateSchoolYearInput!): SchoolYear
  deleteSchoolYear(id: ID!): SchoolYear

  createGroup(name: String!, grade: String!, schoolYearId: ID!): Group
  updateGroup(input: UpdateGroupInput!): Group
  deleteGroup(id: ID!): Group

  connectGuardian(guardianId: ID!, studentId: ID!): Guardian
  disconnectGuardian(guardianId: ID!, studentId: ID!): Guardian
  createGuardian(input: CreateGuardianInput!): Guardian
  editGuardian(input: EditGuardianInput!): Guardian
  deleteGuardian(id: ID!): Guardian
}

type Query {
  me: User
  student(id: ID): Student
  students: [Student]
  group(id: ID!): Group
  groups: [Group]
  guardian(id: ID!): Guardian
  guardians: [Guardian]
  user(id: ID!): User
  users: [User]
  userCount: Int
  role(id: ID, name: String): Role
  roles: [Role]
  schoolYear(id: ID): SchoolYear
  schoolYears: [SchoolYear]
  school: School
}

type Student {
  id: ID!
  commonName: String!
  birthdate: String
  languages: String
  idName: String
  chineseName: String
  pinyinName: String
  englishName: String
  gender: String
  nationality: String
  groups: [Group!]!
  gaurdians: [Guardian!]!
  user: User
  createdAt: Date
  updatedAt: Date
}

type Guardian {
  id: ID!
  relationship: String
  name: String
  phone: String
  nationality: String
  email: String
  students: [Student!]!
  createdAt: Date
  updatedAt: Date
}

type User {
  id: ID!
  username: String!
  email: String
  isVerified: Boolean
  roles: [String!]!
  name: String
  groups: [Group!]!
  createdAt: Date
  updatedAt: Date
  studentId: ID
}

type Role {
  id: ID!
  name: String!
  users: [User!]!
  createdAt: Date
  updatedAt: Date
}

type SchoolYear {
  id: ID!
  name: String
  startDate: String
  endDate: String
  groups: [Group!]!
  createdAt: Date
  updatedAt: Date
}

type Group {
  id: ID!
  name: String
  grade: String
  teachers: [User!]!
  students: [Student!]!
  schoolYear: SchoolYear
  createdAt: Date
  updatedAt: Date
}

type School {
  id: ID!
  name: String!
  address: String
  createdAt: Date
  updatedAt: Date
}

input CreateStudentInput {
  commonName: String!
  groupId: ID!
}

input UpdateStudentInput {
  id: ID!
  commonName: String!
  birthdate: String
  languages: String
  idName: String
  chineseName: String
  pinyinName: String
  englishName: String
  gender: String
  nationality: String
  groupId: ID
}

input CreateUserInput {
  username: String!
  password: String!
  role: String!
  email: String
  name: String
}

input CreateInitialAdminInput {
  username: String!
  name: String
  email: String
  password: String!
}

input UpdateUserInput {
  id: ID!
  username: String!
  role: String
  email: String
  name: String
}

input CreateSchoolYearInput {
  name: String!
  startDate: String!
  endDate: String!
}

input UpdateSchoolYearInput {
  id: ID!
  name: String!
  startDate: String!
  endDate: String!
}
input CreateGuardianInput {
  relationship: String!
  name: String!
  phone: String
  nationality: String
  email: String
  studentId: ID!
}

input EditGuardianInput {
  id: ID!
  relationship: String!
  name: String!
  phone: String
  nationality: String
  email: String
}

input UpdateGroupInput {
  id: ID!
  name: String!
  grade: String!
  schoolYearId: ID!
}
